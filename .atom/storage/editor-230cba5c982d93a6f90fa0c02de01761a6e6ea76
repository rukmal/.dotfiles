{"mode":"editor","version":"0.71.0","windowDimensions":{"x":0,"y":0,"width":1920,"height":1200},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/rukmal/Documents/Eclipse Files/Huffman2","buffers":[{"text":"import java.io.*;\nimport java.util.*;\n\npublic class HuffmanTree2 {\n\tprivate HuffmanNode overallRoot;\n\n\t/*\n\t * Pre: Takes an array of ints with the counts of letters as a parameter.\n\t *\n\t * Post: Constructs a new HuffmanTree2 object.\n\t */\n\tpublic HuffmanTree2(int[] count) {\n\t\tQueue<HuffmanNode> letterQueue = new PriorityQueue<HuffmanNode>();\n\t\tfor (int i = 0; i < count.length; i++) {\n\t\t\tif (count[i] > 0) {\n\t\t\t\tletterQueue.add(new HuffmanNode(count[i], i));\n\t\t\t}\n\t\t}\n\t\tletterQueue.add(new HuffmanNode(1, count.length));\n\t\twhile (letterQueue.size() > 1) {\n\t\t\tletterQueue.add(new HuffmanNode(letterQueue.remove(), letterQueue.remove()));\n\t\t}\n\t\toverallRoot = letterQueue.remove();\n\t}\n\n\t/*\n\t * Pre: Takes a BitInputStream object as a parameter.\n\t *l\n\t * Post: Constructs a new HuffmanTree2 object.\n\t */\n\tpublic HuffmanTree2(BitInputStream input) {\n\t\toverallRoot = makeTree(input, new HuffmanNode());\n\t}\n\n\t/*\n\t * Pre: Takes a BitInputStream object, PrintStream object and an int representing the EOF\n\t *      character as parameters.\n\t *\n\t * Post: Decodes and outputs the file.\n\t */\n\tpublic void decode(BitInputStream input, PrintStream output, int eof) {\n\t\tboolean isDone = false;\n\t\twhile (!isDone) {\n\t\t\tisDone = decode(input, output, eof, overallRoot);\n\t\t}\n\t}\n\n\t/*\n\t * Pre: Takes an array of strings as input.\n\t *\n\t * Post: Assigns codes for each of the characters into the corresponding positions in\n\t *\t\t the array.\n\t */\n\tpublic void assign(String[] codes) {\n\t\tassign(codes, overallRoot, \"\");\n\t}\n\n\tpublic void writeHeader(BitOutputStream output) {\n\t\twriteHeader(output, overallRoot);\n\t}\n\n\t/*\n\t * Helper method for the public decode method.\n\t */\n\tprivate boolean decode(BitInputStream input, PrintStream output, int eof, HuffmanNode root) {\n\t\tif (root.letter == eof) {\n\t\t\treturn true;\n\t\t} else if (root.letter != -1) {\n\t\t\toutput.write(root.letter);\n\t\t\treturn false;\n\t\t} else if (input.readBit() == 0) {\n\t\t\treturn decode(input, output, eof, root.left);\n\t\t} else {\n\t\t\treturn decode(input, output, eof, root.right);\n\t\t}\n\t}\n\n\t/*\n\t * Helper method for the public HuffmanTree2 constructor.\n\t */\n\tprivate HuffmanNode makeTree(BitInputStream input, HuffmanNode root) {\n\t\tif (input.readBit() == 1) {\n\t\t\treturn new HuffmanNode(-1, read9(input));\n\t\t} else if (root.left == null && root.right == null) {\n\t\t\troot.left = makeTree(input, new HuffmanNode());\n\t\t\troot.right = makeTree(input, new HuffmanNode());\n\t\t}\n\t\treturn root;\n\t}\n\n\t/*\n\t * Helper method for the public assign method.\n\t */\n\tprivate void assign(String[] codes, HuffmanNode root, String path) {\n\t\tif (root.letter == -1) {\n\t\t\tassign(codes, root.left, path + \"0\");\n\t\t\tassign(codes, root.right, path + \"1\");\n\t\t} else {\n\t\t\tcodes[root.letter] = path;\n\t\t}\n\t}\n\n\t/*\n\t * Helper method for the public writeHeader method.\n\t */\n\tprivate void writeHeader(BitOutputStream output, HuffmanNode root) {\n\t\tif (root.letter != -1) {\n\t\t\toutput.writeBit(1);\n\t\t\twrite9(output, root.letter);\n\t\t} else {\n\t\t\toutput.writeBit(0);\n\t\t\twriteHeader(output, root.left);\n\t\t\toutput.writeBit(0);\n\t\t\twriteHeader(output, root.right);\n\t\t}\n\t}\n\n\t// pre : an integer n has been encoded using write9 or its equivalent\n\t// post: reads 9 bits to reconstruct the original integer\n\tprivate int read9(BitInputStream input) {\n\t\tint multiplier = 1;\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < 9; i++) {\n\t\t\tsum += multiplier * input.readBit();\n\t\t\tmultiplier *= 2;\n\t\t}\n\t\treturn sum;\n\t}\n\t\n\t// pre : 0 <= n < 512\n\t// post: writes a 9-bit representation of n to the given output stream\n\tprivate void write9(BitOutputStream output, int n) {\n\t\tfor (int i = 0; i < 9; i++) {\n\t\t\toutput.writeBit(n % 2);\n\t\t\tn /= 2;\n\t\t}\n\t}\n}\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":43},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/HuffmanTree2.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b44c478e70723980f6ccc10de7367884740d4096","deserializer":"TextBuffer"},{"text":"// Stuart Reges\n// 5/25/05\n//\n// Encode2 prompts the user for the name of a file to be encoded and the name\n// to use for the binary (encoded) output file.  It examines the input file for\n// the frequencies of characters and then uses a Huffman tree to generate codes\n// to use for each character so as to compress the original file.\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Encode2 {\n    public static final int CHAR_MAX = 256;  // max char value to be encoded\n\n    public static void main(String[] args) throws IOException {\n        System.out.println(\"This program encodes a file with a Huffman code.\");\n        System.out.println();\n\n        Scanner console = new Scanner(System.in);\n        System.out.print(\"input file name? \");\n        String inFile = console.nextLine();\n        System.out.print(\"output file name? \");\n        String outputFile = console.nextLine();\n        \n        // open input file and count character frequencies\n        FileInputStream input = new FileInputStream(inFile);\n        int[] count = new int[CHAR_MAX];\n        int n = input.read();\n        while (n != -1) {\n            count[n]++;\n            n = input.read();\n        }\n\n        // build tree, get codes\n        HuffmanTree2 t = new HuffmanTree2(count);\n        String[] codes = new String[CHAR_MAX + 1];\n        t.assign(codes);\n\n        // open output, write header\n        BitOutputStream output = new BitOutputStream(outputFile);\n        t.writeHeader(output);\n\n        // reset input, encode file, close output\n        input.close();\n        input = new FileInputStream(inFile);\n        n = input.read();\n        while (n != -1) {\n            writeString(codes[n], output);\n            n = input.read();\n        }\n        writeString(codes[CHAR_MAX], output);\n        output.close();\n    }\n\n    public static void writeString(String s, BitOutputStream output) {\n        for (int i = 0; i < s.length(); i++)\n            output.writeBit(s.charAt(i) - '0');\n    }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[59,0],[59,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":45,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/Encode2.java","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7f85d645d12fdb004ea932ae072c0ec61d713cdf","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":43,"softTabs":false,"scrollTop":440,"scrollLeft":0,"displayBuffer":{"id":44,"softWrap":true,"editorWidthInChars":235,"tokenizedBuffer":{"bufferPath":"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/HuffmanTree2.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":45,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":46,"softWrap":true,"editorWidthInChars":236,"tokenizedBuffer":{"bufferPath":"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/Encode2.java","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/Encode2.java","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":true,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/HuffmanTree2.java":1394749206821,"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/Encode2.java":1394749210419},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":30942220},"tree-view":{"directoryExpansionStates":{"src":{}},"selectedPath":"/Users/rukmal/Documents/Eclipse Files/Huffman2/src/Encode2.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":232}}}